import yfinance as yf

class StockData:
    def __init__(self):
        self.flatmondayResults = [] #turn these into dictionaries
        self.percentagemondayResults = []

        self.flattuesdayResults = []
        self.percentagetuesdayResults = []

        self.flatwednesdayResults = []
        self.percentagewednesdayResults = []

        self.flatthursdayResults = []
        self.percentagethursdayResults = []

        self.flatfridayResults = []
        self.percentagefridayResults = []

    def downloadstock(self, ticker, startDate, endDate):
        fianceData = yf.download(ticker, start=startDate, end=endDate, interval="1d")
        self.sort(fianceData)

    def sort(self, fianceData): #turn this into a keyed dictionary?

        for index, row in fianceData.iterrows():
            if index.isoweekday() == 1:
                self.flatmondayResults.append(round(self.flatgaincalc(open=row['Open'], close=row['Close']), 2))
                self.percentagemondayResults.append(round(self.percentagegaincalc(open=row['Open'], close=row['Close']), 2))

            if index.isoweekday() == 2:
                self.flattuesdayResults.append(round(self.flatgaincalc(open=row['Open'], close=row['Close']), 2))
                self.percentagetuesdayResults.append(round(self.percentagegaincalc(open=row['Open'], close=row['Close']), 2))

            if index.isoweekday() == 3:
                self.flatwednesdayResults.append(round(self.flatgaincalc(open=row['Open'], close=row['Close']), 2))
                self.percentagewednesdayResults.append(round(self.percentagegaincalc(open=row['Open'], close=row['Close']), 2))

            if index.isoweekday() == 4:
                self.flatthursdayResults.append(round(self.flatgaincalc(open=row['Open'], close=row['Close']), 2))
                self.percentagethursdayResults.append(round(self.percentagegaincalc(open=row['Open'], close=row['Close']), 2))

            if index.isoweekday() == 5:
                self.flatfridayResults.append(round(self.flatgaincalc(open=row['Open'], close=row['Close']), 2))
                self.percentagefridayResults.append(round(self.percentagegaincalc(open=row['Open'], close=row['Close']), 2))

    def flatgaincalc(self, close, open):
        total = close - open
        return total

    def percentagegaincalc(self, close, open):
        percentage = (close - open) / open * 100
        return percentage

    def printpercentage(self):
        print("Monday Percentage Results: ")
        print(["{}{}".format(i, "%") for i in self.percentagemondayResults])

        print("Tuesday Percentage Results: ")
        print(["{}{}".format(i, "%") for i in self.percentagetuesdayResults])

        print("Wednesday Percentage Results: ")
        print(["{}{}".format(i, "%") for i in self.percentagewednesdayResults])

        print("Thursday Percentage Results: ")
        print(["{}{}".format(i, "%") for i in self.percentagethursdayResults])

        print("Friday Percentage Results: ")
        print(["{}{}".format(i, "%") for i in self.percentagefridayResults])

    def printflat(self):
        print("Monday Flat Results: ")
        print(self.flatmondayResults)

        print("Tuesday Flat Results: ")
        print(self.flattuesdayResults)

        print("Wednesday Flat Results: ")
        print(self.flatwednesdayResults)

        print("Thursday Flat Results: ")
        print(self.flatthursdayResults)

        print("Friday Flat Results: ")
        print(self.flatfridayResults)

    def flatarrayconcat(self):
        flatdays = self.flatmondayResults, self.flattuesdayResults, self.flatwednesdayResults, self.flatthursdayResults, self.flatfridayResults
        return flatdays



startDate = "2010-06-01"
endDate = "2020-06-01"

ATVI = StockData()
ATVI.downloadstock("ATVI", startDate, endDate)

SBUX = StockData()
SBUX.downloadstock("SBUX", startDate, endDate)
